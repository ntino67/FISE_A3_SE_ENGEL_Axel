<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackToMainMenu" xml:space="preserve">
    <value>Back to main menu</value>
  </data>
  <data name="DefineSaveMode" xml:space="preserve">
    <value>Define save mode</value>
  </data>
  <data name="DefineSourcePath" xml:space="preserve">
    <value>Define source path</value>
  </data>
  <data name="DefineTargetPath" xml:space="preserve">
    <value>Define target path</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="JobOptions" xml:space="preserve">
    <value>Backup job Options</value>
  </data>
  <data name="LanguageSelected" xml:space="preserve">
    <value>You've selected</value>
  </data>
  <data name="MainMenu" xml:space="preserve">
    <value>Main menu</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="RenameJob" xml:space="preserve">
    <value>Rename job</value>
  </data>
  <data name="RunAllJobs" xml:space="preserve">
    <value>Run all backup jobs</value>
  </data>
  <data name="SelectJob" xml:space="preserve">
    <value>Select a backup job</value>
  </data>
  <data name="SelectLanguage" xml:space="preserve">
    <value>Select your language</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="SelectedOption" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="CreateBackup" xml:space="preserve">
    <value>Create backup</value>
  </data>
  <data name="ResetJob" xml:space="preserve">
    <value>Reset job</value>
  </data>
  <data name="SelectJobPrompt" xml:space="preserve">
    <value>Select job prompt</value>
  </data>
  <data name="CreateNewJob" xml:space="preserve">
    <value>Create new job</value>
  </data>
  <data name="EnterJobName" xml:space="preserve">
    <value>Enter job name : </value>
  </data>
  <data name="MaxJobsReached" xml:space="preserve">
    <value>Max jobs reached</value>
  </data>
  <data name="JobCreated" xml:space="preserve">
    <value>Job created</value>
  </data>
  <data name="ChangeLanguage" xml:space="preserve">
    <value>Change language</value>
  </data>
  <data name="ShowLogs" xml:space="preserve">
    <value>Show logs</value>
  </data>
  <data name="NoLogsAvailable" xml:space="preserve">
    <value>No logs available</value>
  </data>
  <data name="Timestamp" xml:space="preserve">
    <value>Timestamp</value>
  </data>
  <data name="JobName" xml:space="preserve">
    <value>Job name</value>
  </data>
  <data name="SourcePath" xml:space="preserve">
    <value>Source path</value>
  </data>
  <data name="DestinationPath" xml:space="preserve">
    <value>Destination path</value>
  </data>
  <data name="FileSize" xml:space="preserve">
    <value>File size</value>
  </data>
  <data name="TransferTime" xml:space="preserve">
    <value>Transfer time</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="PressEnterToContinue" xml:space="preserve">
    <value>Press enter to continue</value>
  </data>
  <data name="EnterNewName" xml:space="preserve">
    <value>Enter new name : </value>
  </data>
  <data name="JobRenamed" xml:space="preserve">
    <value>Job renamed</value>
  </data>
  <data name="EnterSourcePath" xml:space="preserve">
    <value>Enter source path : </value>
  </data>
  <data name="SourcePathUpdated" xml:space="preserve">
    <value>Source path updated</value>
  </data>
  <data name="EnterTargetPath" xml:space="preserve">
    <value>Enter target path : </value>
  </data>
  <data name="TargetPathUpdated" xml:space="preserve">
    <value>Target path updated</value>
  </data>
  <data name="FullBackup" xml:space="preserve">
    <value>Full backup</value>
  </data>
  <data name="DifferentialBackup" xml:space="preserve">
    <value>Differential backup</value>
  </data>
  <data name="SelectBackupType" xml:space="preserve">
    <value>Select backup type</value>
  </data>
  <data name="BackupTypeUpdated" xml:space="preserve">
    <value>Bacup type updated</value>
  </data>
  <data name="RunningBackup" xml:space="preserve">
    <value>Running backup</value>
  </data>
  <data name="BackupCompleted" xml:space="preserve">
    <value>Backup completed</value>
  </data>
  <data name="BackupFailed" xml:space="preserve">
    <value>Backup failed</value>
  </data>
  <data name="ConfirmReset" xml:space="preserve">
    <value>Confirm reset</value>
  </data>
  <data name="JobReset" xml:space="preserve">
    <value>Job reset</value>
  </data>
  <data name="RunningAllJobs" xml:space="preserve">
    <value>Running all jobs</value>
  </data>
  <data name="JobsCompleted" xml:space="preserve">
    <value>Jobs completed</value>
  </data>
</root>