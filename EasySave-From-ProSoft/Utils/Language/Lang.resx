<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackToMainMenu" xml:space="preserve">
    <value>Back to main menu</value>
  </data>
  <data name="CreateBackup" xml:space="preserve">
    <value>Create backup</value>
  </data>
  <data name="DefineSaveMode" xml:space="preserve">
    <value>Define save mode</value>
  </data>
  <data name="DefineSourcePath" xml:space="preserve">
    <value>Define source path</value>
  </data>
  <data name="DefineTargetPath" xml:space="preserve">
    <value>Define target path</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="JobOptions" xml:space="preserve">
    <value>Backup job options</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LanguageSelected" xml:space="preserve">
    <value>You've selected</value>
  </data>
  <data name="LogPath" xml:space="preserve">
    <value>Path of daily log files</value>
  </data>
  <data name="MainMenu" xml:space="preserve">
    <value>Main menu</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="OptionsMenu" xml:space="preserve">
    <value>Options menu</value>
  </data>
  <data name="RenameJob" xml:space="preserve">
    <value>Rename job</value>
  </data>
  <data name="SelectMultipleJobs" xml:space="preserve">
    <value>Select multiple jobs</value>
  </data>
  <data name="SelectJob" xml:space="preserve">
    <value>Select a backup job</value>
  </data>
  <data name="SelectLanguage" xml:space="preserve">
    <value>Select your language</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="CurrentFolder" xml:space="preserve">
    <value>Current folder</value>
  </data>
  <data name="WhatJobsList" xml:space="preserve">
    <value>Are you sure you want to run [green]multiple jobs[/] (no comeback) ?</value>
  </data>
  <data name="JobsListIndication" xml:space="preserve">
    <value>[grey](Press [blue]&lt;space&gt;[/] to toggle a job, [green]&lt;enter&gt;[/] to run selected jobs)[/]</value>
  </data>
  <data name="BackToMainMenuAndDoNothing" xml:space="preserve">
    <value>Go back to main menu and do nothing </value>
  </data>
  <data name="CreateNewJob" xml:space="preserve">
    <value>Create a new job</value>
  </data>
  <data name="EnterJobName" xml:space="preserve">
    <value>Please enter new job name</value>
  </data>
  <data name="ResetJob" xml:space="preserve">
    <value>Reset this job /!\</value>
  </data>
  <data name="SelectJobPrompt" xml:space="preserve">
    <value>Select a backup job</value>
  </data>
  <data name="ConfirmReset" xml:space="preserve">
    <value>Are you sure you want to reset this job ? (Every settings will be deleted)</value>
  </data>
  <data name="PressAKeyToContinue" xml:space="preserve">
    <value>Press a key to continue</value>
  </data>
  <data name="SuccessfullBackup" xml:space="preserve">
    <value>Backup successfully done</value>
  </data>
  <data name="ValidateFolder" xml:space="preserve">
    <value>Select this folder</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="FullBackup" xml:space="preserve">
    <value>Full Backup</value>
  </data>
  <data name="DifferentialBackup" xml:space="preserve">
    <value>Differential Backup</value>
  </data>
  <data name="DeleteJob" xml:space="preserve">
    <value>Delete Job</value>
  </data>
  <data name="ConfirmDelete" xml:space="preserve">
    <value>Confirm delete</value>
  </data>
  <data name="JobDeleted" xml:space="preserve">
    <value>The job {0} has been deleted</value>
  </data>
  <data name="JobCreated" xml:space="preserve">
    <value>The job {0} has been created.</value>
  </data>
  <data name="StatusPath" xml:space="preserve">
    <value>Path to the state log file</value>
  </data>
  <data name="FileLocation" xml:space="preserve">
    <value>Location of the files</value>
  </data>
  <data name="LogPaths" xml:space="preserve">
    <value>View log paths</value>
  </data>
</root>